generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  name        String
  email       String        @unique
  password    String
  role        String
  Account     Account[]
  answer      Answer[]
  information Information[]
  question    Question[]
  report      Report[]
  Session     Session[]
  Payment     UserPayment[]
}

model Question {
  id        String   @id @default(cuid())
  title     String
  question  String
  createdAt DateTime @default(now())
  userId    String?
  answers   Answer[]
  User      User?    @relation(fields: [userId], references: [id])
}

model Answer {
  id         String   @id @default(cuid())
  answer     String
  questionId String
  createdAt  DateTime @default(now())
  userId     String?
  User       User?    @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Information {
  id        String   @id @default(cuid())
  name      String
  title     String
  desc      String
  fullInfo  String
  userId    String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id        String   @id @default(cuid())
  title     String
  desc      String
  image     String?
  userId    String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

model Hospital {
  id             Int              @id @default(autoincrement())
  name           String
  image          String?
  address        String?
  description    String?
  doctorId       String?
  doctors        Doctor[]
  departments    Department[]     @relation("DepartmentToHospital")
  DoctorSchedule DoctorSchedule[]
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String
  image     String?
  doctorId  String?
  doctors   Doctor[]
  hospitals Hospital[] @relation("DepartmentToHospital")
}

model Doctor {
  id          Int              @id @default(autoincrement())
  name        String
  image       String?
  address     String?
  experience  String?
  phone       Int?
  email       String?
  departments Department[]
  hospitals   Hospital[]
  schedules   DoctorSchedule[]
  payments    History[]
}

model DoctorSchedule {
  id         Int             @id @default(autoincrement())
  hospitalId Int?
  hospital   Hospital?       @relation(fields: [hospitalId], references: [id])
  date       AvailableTime[]
  doctorId   String?
  doctors    Doctor[]
  history    History[]
}

model AvailableTime {
  id       Int              @id @default(autoincrement())
  token    String?
  date     String?
  schedule DoctorSchedule[]
}

model UserPayment {
  id      Int       @id @default(autoincrement())
  userId  String?
  User    User?     @relation(fields: [userId], references: [id])
  history History[]
}

model History {
  id            Int             @id @default(autoincrement())
  doctorId      Int?
  doctor        Doctor?         @relation(fields: [doctorId], references: [id])
  scheduleId    Int?
  schedule      DoctorSchedule? @relation(fields: [scheduleId], references: [id])
  paymentAmount String?
  status        String?
  userPayment   UserPayment[]
}
