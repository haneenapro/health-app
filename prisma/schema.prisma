generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id          String        @id @default(cuid())
  name        String
  email       String        @unique
  password    String
  role        String
  accounts    Account[]
  answer      Answer[]
  Doctor      Doctor[]
  information Information[]
  question    Question[]
  report      Report[]
  Session     Session[]
  Payment     UserPayment[]
  image       String?
  createdAt   DateTime      @default(now())
}

model Question {
  id        String   @id @default(cuid())
  title     String
  question  String
  createdAt DateTime @default(now())
  userId    String?
  answers   Answer[]
  User      User?    @relation(fields: [userId], references: [id])
}

model Answer {
  id         String   @id @default(cuid())
  answer     String
  questionId String
  createdAt  DateTime @default(now())
  userId     String?
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  User       User?    @relation(fields: [userId], references: [id])
}

model Information {
  id        String   @id @default(cuid())
  name      String
  title     String
  desc      String
  fullInfo  String
  userId    String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id        String   @id @default(cuid())
  title     String
  desc      String
  image     String?
  userId    String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

model Hospital {
  id             Int              @id @default(autoincrement())
  name           String
  image          String?
  address        String?
  description    String?
  doctorId       String?
  DoctorSchedule DoctorSchedule[]
  departments    Department[]     @relation("DepartmentToHospital")
  doctors        Doctor[]         @relation("DoctorToHospital")
  UserPayment    UserPayment[]
}

model Department {
  id             Int              @id @default(autoincrement())
  name           String
  image          String?
  doctorId       String?
  DoctorSchedule DoctorSchedule[]
  doctors        Doctor[]         @relation("DepartmentToDoctor")
  hospitals      Hospital[]       @relation("DepartmentToHospital")
  UserPayment    UserPayment[]
}

model Doctor {
  id            String           @id @default(cuid())
  name          String
  image         String?
  address       String?
  experience    String?
  phone         Int?
  email         String?
  userId        String?
  qualification String?
  User          User?            @relation(fields: [userId], references: [id])
  schedules     DoctorSchedule[]
  departments   Department[]     @relation("DepartmentToDoctor")
  hospitals     Hospital[]       @relation("DoctorToHospital")
  isVerified    String?          @default("false")
  UserPayment   UserPayment[]
  createdAt     DateTime         @default(now())
}

model DoctorSchedule {
  id           Int             @id @default(autoincrement())
  hospitalId   Int?
  doctorId     String?
  departmentId Int?
  department   Department?     @relation(fields: [departmentId], references: [id])
  doctor       Doctor?         @relation(fields: [doctorId], references: [id])
  hospital     Hospital?       @relation(fields: [hospitalId], references: [id])
  date         AvailableTime[] @relation("AvailableTimeToDoctorSchedule")
  UserPayment  UserPayment[]
}

model AvailableTime {
  id          Int              @id @default(autoincrement())
  token       String?
  date        String?
  amount      String?
  schedule    DoctorSchedule[] @relation("AvailableTimeToDoctorSchedule")
  UserPayment UserPayment[]
}

model UserPayment {
  id               Int             @id @default(autoincrement())
  userId           String?
  User             User?           @relation(fields: [userId], references: [id])
  doctorId         String?
  departmentId     Int?
  status           String?         @default("notverified")
  doctor           Doctor?         @relation(fields: [doctorId], references: [id])
  department       Department?     @relation(fields: [departmentId], references: [id])
  hospitalId       Int?
  hospital         Hospital?       @relation(fields: [hospitalId], references: [id])
  availableTimeId  Int?
  availableTime    AvailableTime?  @relation(fields: [availableTimeId], references: [id])
  DoctorSchedule   DoctorSchedule? @relation(fields: [doctorScheduleId], references: [id])
  doctorScheduleId Int?
  appointmentType  String?
  link             String?
}
