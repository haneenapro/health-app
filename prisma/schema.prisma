generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  name        String
  email       String        @unique
  password    String
  role        String
  answer      Answer[]
  information Information[]
  question    Question[]
  report      Report[]
  Session     Session[]
  Payment     UserPayment[]
  Doctor      Doctor[]
}

model Question {
  id        String   @id @default(cuid())
  title     String
  question  String
  createdAt DateTime @default(now())
  userId    String?
  answers   Answer[]
  User      User?    @relation(fields: [userId], references: [id])
}

model Answer {
  id         String   @id @default(cuid())
  answer     String
  questionId String
  createdAt  DateTime @default(now())
  userId     String?
  User       User?    @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Information {
  id        String   @id @default(cuid())
  name      String
  title     String
  desc      String
  fullInfo  String
  userId    String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id        String   @id @default(cuid())
  title     String
  desc      String
  image     String?
  userId    String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

model Hospital {
  id             Int              @id @default(autoincrement())
  name           String
  image          String?
  address        String?
  description    String?
  doctorId       String?
  doctors        Doctor[]
  departments    Department[]     @relation("DepartmentToHospital")
  DoctorSchedule DoctorSchedule[]
}

model Department {
  id             Int              @id @default(autoincrement())
  name           String
  image          String?
  doctorId       String?
  doctors        Doctor[]
  hospitals      Hospital[]       @relation("DepartmentToHospital")
  DoctorSchedule DoctorSchedule[]
}

model Doctor {
  id            String           @id @default(cuid())
  name          String
  image         String?
  address       String?
  experience    String?
  phone         Int?
  email         String?
  userId        String?
  User          User?            @relation(fields: [userId], references: [id])
  departments   Department[]
  hospitals     Hospital[]
  schedules     DoctorSchedule[]
  payments      History[]
  qualification String?
}

model DoctorSchedule {
  id           Int             @id @default(autoincrement())
  hospitalId   Int?
  hospital     Hospital?       @relation(fields: [hospitalId], references: [id])
  date         AvailableTime[]
  doctorId     String?
  doctor       Doctor?         @relation(fields: [doctorId], references: [id])
  history      History[]
  departmentId Int?
  department   Department?     @relation(fields: [departmentId], references: [id])
}

model AvailableTime {
  id       Int              @id @default(autoincrement())
  token    String?
  date     String?
  schedule DoctorSchedule[]
  amount   String?
}

model UserPayment {
  id      Int       @id @default(autoincrement())
  userId  String?
  User    User?     @relation(fields: [userId], references: [id])
  history History[]
}

model History {
  id            Int             @id @default(autoincrement())
  doctorId      String?
  doctor        Doctor?         @relation(fields: [doctorId], references: [id])
  scheduleId    Int?
  schedule      DoctorSchedule? @relation(fields: [scheduleId], references: [id])
  paymentAmount String?
  status        String?
  userPayment   UserPayment[]
}
